// SPDX-License-Identifier: GPL-3.0-only
// This file is auto-generated. DO NOT EDIT!

#ifndef BALLTZE_API__ENGINE__TAG_DEFINITION__ENUM_HPP
#define BALLTZE_API__ENGINE__TAG_DEFINITION__ENUM_HPP

#include "../../memory.hpp"
#include "../tag.hpp"
#include "../script.hpp"
#include "enum.hpp"
#include "bitfield.hpp"

#pragma pack(push)
#pragma pack(1)


namespace Balltze::Engine::TagDefinitions { 
	enum FramebufferBlendFunction : std::uint16_t {
		FRAMEBUFFER_BLEND_FUNCTION_ALPHA_BLEND = 0,
		FRAMEBUFFER_BLEND_FUNCTION_MULTIPLY,
		FRAMEBUFFER_BLEND_FUNCTION_DOUBLE_MULTIPLY,
		FRAMEBUFFER_BLEND_FUNCTION_ADD,
		FRAMEBUFFER_BLEND_FUNCTION_SUBTRACT,
		FRAMEBUFFER_BLEND_FUNCTION_COMPONENT_MIN,
		FRAMEBUFFER_BLEND_FUNCTION_COMPONENT_MAX,
		FRAMEBUFFER_BLEND_FUNCTION_ALPHA_MULTIPLY_ADD,
	};

	enum FramebufferFadeMode : std::uint16_t {
		FRAMEBUFFER_FADE_MODE_NONE = 0,
		FRAMEBUFFER_FADE_MODE_FADE_WHEN_PERPENDICULAR,
		FRAMEBUFFER_FADE_MODE_FADE_WHEN_PARALLEL,
	};

	enum FunctionOut : std::uint16_t {
		FUNCTION_OUT_NONE = 0,
		FUNCTION_OUT_A_OUT,
		FUNCTION_OUT_B_OUT,
		FUNCTION_OUT_C_OUT,
		FUNCTION_OUT_D_OUT,
	};

	enum WaveFunction : std::uint16_t {
		WAVE_FUNCTION_ONE = 0,
		WAVE_FUNCTION_ZERO,
		WAVE_FUNCTION_COSINE,
		WAVE_FUNCTION_COSINE_VARIABLE_PERIOD,
		WAVE_FUNCTION_DIAGONAL_WAVE,
		WAVE_FUNCTION_DIAGONAL_WAVE_VARIABLE_PERIOD,
		WAVE_FUNCTION_SLIDE,
		WAVE_FUNCTION_SLIDE_VARIABLE_PERIOD,
		WAVE_FUNCTION_NOISE,
		WAVE_FUNCTION_JITTER,
		WAVE_FUNCTION_WANDER,
		WAVE_FUNCTION_SPARK,
	};

	enum MaterialType : std::uint16_t {
		MATERIAL_TYPE_DIRT = 0,
		MATERIAL_TYPE_SAND,
		MATERIAL_TYPE_STONE,
		MATERIAL_TYPE_SNOW,
		MATERIAL_TYPE_WOOD,
		MATERIAL_TYPE_METAL_HOLLOW,
		MATERIAL_TYPE_METAL_THIN,
		MATERIAL_TYPE_METAL_THICK,
		MATERIAL_TYPE_RUBBER,
		MATERIAL_TYPE_GLASS,
		MATERIAL_TYPE_FORCE_FIELD,
		MATERIAL_TYPE_GRUNT,
		MATERIAL_TYPE_HUNTER_ARMOR,
		MATERIAL_TYPE_HUNTER_SKIN,
		MATERIAL_TYPE_ELITE,
		MATERIAL_TYPE_JACKAL,
		MATERIAL_TYPE_JACKAL_ENERGY_SHIELD,
		MATERIAL_TYPE_ENGINEER_SKIN,
		MATERIAL_TYPE_ENGINEER_FORCE_FIELD,
		MATERIAL_TYPE_FLOOD_COMBAT_FORM,
		MATERIAL_TYPE_FLOOD_CARRIER_FORM,
		MATERIAL_TYPE_CYBORG_ARMOR,
		MATERIAL_TYPE_CYBORG_ENERGY_SHIELD,
		MATERIAL_TYPE_HUMAN_ARMOR,
		MATERIAL_TYPE_HUMAN_SKIN,
		MATERIAL_TYPE_SENTINEL,
		MATERIAL_TYPE_MONITOR,
		MATERIAL_TYPE_PLASTIC,
		MATERIAL_TYPE_WATER,
		MATERIAL_TYPE_LEAVES,
		MATERIAL_TYPE_ELITE_ENERGY_SHIELD,
		MATERIAL_TYPE_ICE,
		MATERIAL_TYPE_HUNTER_SHIELD,
	};

	enum FunctionType : std::uint16_t {
		FUNCTION_TYPE_LINEAR = 0,
		FUNCTION_TYPE_EARLY,
		FUNCTION_TYPE_VERY_EARLY,
		FUNCTION_TYPE_LATE,
		FUNCTION_TYPE_VERY_LATE,
		FUNCTION_TYPE_COSINE,
	};

	enum FunctionBoundsMode : std::uint16_t {
		FUNCTION_BOUNDS_MODE_CLIP = 0,
		FUNCTION_BOUNDS_MODE_CLIP_AND_NORMALIZE,
		FUNCTION_BOUNDS_MODE_SCALE_TO_FIT,
	};

	enum FunctionScaleBy : std::uint16_t {
		FUNCTION_SCALE_BY_NONE = 0,
		FUNCTION_SCALE_BY_A_IN,
		FUNCTION_SCALE_BY_B_IN,
		FUNCTION_SCALE_BY_C_IN,
		FUNCTION_SCALE_BY_D_IN,
		FUNCTION_SCALE_BY_A_OUT,
		FUNCTION_SCALE_BY_B_OUT,
		FUNCTION_SCALE_BY_C_OUT,
		FUNCTION_SCALE_BY_D_OUT,
	};

	enum FunctionNameNullable : std::uint16_t {
		FUNCTION_NAME_NULLABLE_NONE = 0,
		FUNCTION_NAME_NULLABLE_A,
		FUNCTION_NAME_NULLABLE_B,
		FUNCTION_NAME_NULLABLE_C,
		FUNCTION_NAME_NULLABLE_D,
	};

	enum GrenadeType : std::uint16_t {
		GRENADE_TYPE_HUMAN_FRAGMENTATION = 0,
		GRENADE_TYPE_COVENANT_PLASMA,
		GRENADE_TYPE_GRENADE_TYPE_2,
		GRENADE_TYPE_GRENADE_TYPE_3,
	};

	enum VertexType : std::uint16_t {
		VERTEX_TYPE_STRUCTURE_BSP_UNCOMPRESSED_RENDERED_VERTICES = 0,
		VERTEX_TYPE_STRUCTURE_BSP_COMPRESSED_RENDERED_VERTICES,
		VERTEX_TYPE_STRUCTURE_BSP_UNCOMPRESSED_LIGHTMAP_VERTICES,
		VERTEX_TYPE_STRUCTURE_BSP_COMPRESSED_LIGHTMAP_VERTICES,
		VERTEX_TYPE_MODEL_UNCOMPRESSED,
		VERTEX_TYPE_MODEL_COMPRESSED,
	};

}

#pragma pack(pop)

#endif

